!function($){function SockettyTerminal(id,ip,options){this.options=$.extend({},SockettyTerminal.defaults,options),this.term=new Terminal(options),this.id=id,this.ip=ip,this.isOpen=!1,this.isRecording=!1,this.recordBuffer=""}SockettyTerminal.defaults={cols:80,rows:24,screenKeys:!0,useStyle:!1,cursorBlink:!0,debug:!1},SockettyTerminal.prototype.close=function(){this.isOpen&&this.term.destroy(),this.isOpen=!1},SockettyTerminal.prototype.open=function($container){this.term.open($container[0]),this.isOpen=!0},SockettyTerminal.prototype.write=function(data){this.isRecording&&(this.recordBuffer+=data),this.term.write(data)},SockettyTerminal.prototype.paste=function(data){this.term.send(data)},SockettyTerminal.prototype.setRecord=function(isRecording){this.isRecording=isRecording},SockettyTerminal.prototype.getRecorded=function(){return this.recordBuffer},this.SockettyTerminal=SockettyTerminal}(jQuery),function($){function SockettyClient(options){this._options=$.extend({},SockettyClient.defaults,options),this._isAuthenticated=!1,this._retry=!0,this._terminals={},this._connect()}const CREATE_TERMINAL=1,CREATE_TERMINAL_SUCCESS=2,CREATE_TERMINAL_FAILURE=3,READ_TERMINAL_DATA=4,READ_TERMINAL_DATA_FAILURE=5,WRITE_TERMINAL_DATA=6,WRITE_TERMINAL_DATA_FAILURE=7,CLOSE_TERMINAL=8,CLOSE_TERMINAL_SUCCESS=9,CLOSE_TERMINAL_FAILURE=10,MESSAGE_UNKNOWN=11,AUTHENTICATE=12,AUTHENTICATION_SUCCESS=13,AUTHENTICATION_FAILURE=14;SockettyClient.defaults={url:"wss://localhost:443",reconnectTime:5,debug:!1,onOpen:function(){},onClose:function(){},onError:function(){},onAuthFailure:function(){},onAuthSuccess:function(){},onTerminalCreated:function(terminalWrapper){},onTerminalCreateFailure:function(terminalWrapper,msg){},onTerminalClose:function(terminalWrapper,msg){},onTerminalReadFailure:function(terminalWrapper,msg){},onTerminalWriteFailure:function(terminalWrapper,msg){}};var uniqueId=0;SockettyClient.getUniqueId=function(){return uniqueId++,uniqueId},SockettyClient.prototype.getTerminalById=function(id){return this._terminals[id]},SockettyClient.prototype.requestCloseTerminal=function(id){this._send(CLOSE_TERMINAL,{id:id})},SockettyClient.prototype.requestCreateTerminal=function(ip,username,password,terminalOptions){var that=this,id=SockettyClient.getUniqueId(),terminalWrapper=new SockettyTerminal(id,ip,terminalOptions);return this._terminals[id]=terminalWrapper,terminalWrapper.term.on("data",function(data){that._send(WRITE_TERMINAL_DATA,{id:id,d:data})}),this._send(CREATE_TERMINAL,{id:id,ip:ip,username:username,password:password}),terminalWrapper},SockettyClient.prototype._connect=function(){this._conn=new WebSocket(this._options.url),this._setWebSocketListeners()},SockettyClient.prototype._close=function(){this._conn.close()},SockettyClient.prototype.isConnected=function(){return this._conn.readyState==WebSocket.OPEN},SockettyClient.prototype.isAuthenticated=function(){return this._isAuthenticated},SockettyClient.prototype._setWebSocketListeners=function(){var that=this;this._conn.onopen=function(e){that._log("Connection established"),that._send(AUTHENTICATE),that._options.onOpen()},this._conn.onmessage=function(e){that._log("Msg received: "+e.data);var data=JSON.parse(e.data);that._handleMessage(data.type,data.value)},this._conn.onerror=function(){that._log("Connection error"),that._options.onError()},this._conn.onclose=function(e){that._log("Connection closed");for(var id in that._terminals)that._terminals.hasOwnProperty(id)&&that._closeTerminal(that._terminals[id],"Terminal closed because connection was lost");that._options.onClose(),that._retry&&setTimeout(function(){that._connect()},1e3*that._options.reconnectTime)}},SockettyClient.prototype._handleMessage=function(type,obj){var terminalWrapper=this._terminals[obj.id];switch(type){case CREATE_TERMINAL_SUCCESS:this._log("Terminal created"),this._options.onTerminalCreated(terminalWrapper);break;case CREATE_TERMINAL_FAILURE:this._log("Terminal create failed: "+obj.msg),this._options.onTerminalCreateFailure(terminalWrapper,obj.msg),this._closeTerminal(terminalWrapper,"Closed due to previous error");break;case READ_TERMINAL_DATA:terminalWrapper.write(obj.d);break;case READ_TERMINAL_DATA_FAILURE:this._log("Error reading data from remote: "+obj.msg),this._options.onTerminalReadFailure(terminalWrapper,obj.msg);break;case WRITE_TERMINAL_DATA_FAILURE:this._log("Error writing data to remote: "+obj.msg),this._options.onTerminalWriteFailure(terminalWrapper,obj.msg);break;case CLOSE_TERMINAL_SUCCESS:this._log("Terminal closed by server"),this._closeTerminal(terminalWrapper,"Closed by server");break;case CLOSE_TERMINAL_FAILURE:this._log("Close terminal failure: "+obj.msg),this._closeTerminal(terminalWrapper,"Terminal not properly closed by server - "+obj.msg);break;case MESSAGE_UNKNOWN:this._log("Message was unknown to server. Message: "+JSON.stringify(obj)),this._closeTerminal(terminalWrapper,"Protocol message was unknown to server");break;case AUTHENTICATION_FAILURE:this._log("Authentication failure"),this._retry=!1,this._options.onAuthFailure(),this._close();break;case AUTHENTICATION_SUCCESS:this._log("Authentication succeeded"),this._isAuthenticated=!0,this._options.onAuthSuccess();break;default:this._log("Message from server unknown")}},SockettyClient.prototype._log=function(msg){this._options.debug&&console.log(msg)},SockettyClient.prototype._send=function(type,obj){if(void 0===obj&&(obj={}),!this.isConnected())return void this._log("Cannot send message because the web socket is not connected");var message={type:type,value:obj},msg=JSON.stringify(message);this._conn.send(msg),this._log("Msg sent: "+msg)},SockettyClient.prototype._closeTerminal=function(terminalWrapper,msg){this._options.onTerminalClose(terminalWrapper,msg),terminalWrapper.close(),delete this._terminals[terminalWrapper.id]},this.SockettyClient=SockettyClient}(jQuery);